/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.cake.bakery;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.cake.game.*;
import org.cake.game.exception.GameException;
import org.cake.game.exception.ResourceException;
import org.cake.game.io.ResourceManager;
import org.cake.game.io.iResource;
import org.cake.game.particle.ImageParticleEmitter;
import org.cake.game.particle.iParticleEmitter_Old;

/**
 *
 * @author Aaron
 */
public class ImageEmitterPanel extends javax.swing.JPanel implements iEmitterConfigurator {

    private final static String defaultImage = "resources/images/particle1.png";

    /**
     * Creates new form ImageEmitterPanel
     */
    public ImageEmitterPanel() {
        initComponents();
        imageDisplay = new ImageDisplay();
        imageDisplayHousingPanel.setLayout(new BorderLayout());
        imageDisplayHousingPanel.add(imageDisplay, BorderLayout.CENTER);
        gradientHousingPanel.setLayout(new BorderLayout());
        gradientEditor = new GradientEditor();
        gradientEditor.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                updateGradient();
            }
        });
        gradientEditor.setStart(java.awt.Color.orange);
        gradientEditor.setEnd(new java.awt.Color(1f, 0f, 0f, 0f));
        gradientHousingPanel.add(gradientEditor, BorderLayout.CENTER);
        blendModeComboBox.setModel(new BlendingModeModel());
    }

    private void updateGradient() {
        if (emitter == null) return;
        MultiColorGradient grad = new MultiColorGradient();
        for (int i=0; i<gradientEditor.getControlPointCount(); i++) {
            java.awt.Color c = gradientEditor.getColor(i);
            float pos = gradientEditor.getPointPos(i);
            Color color = new Color(c.getRed()/255f, c.getGreen()/255f, c.getBlue()/255f, c.getAlpha()/255f);
            grad.setColor(color, pos);
        }
        emitter.setGradient(grad);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jSpinner3 = new javax.swing.JSpinner();
        jSpinner4 = new javax.swing.JSpinner();
        jPanel1 = new javax.swing.JPanel();
        jSpinner6 = new javax.swing.JSpinner();
        activeCheckBox = new javax.swing.JCheckBox();
        blendModeComboBox = new javax.swing.JComboBox();
        blendingModeLabel = new javax.swing.JLabel();
        canDieCheckBox = new javax.swing.JCheckBox();
        repeatCheckBox = new javax.swing.JCheckBox();
        emitterLifeLabel = new javax.swing.JLabel();
        emitterLifeSpinner = new javax.swing.JSpinner();
        delayLabel = new javax.swing.JLabel();
        delaySpinner = new javax.swing.JSpinner();
        emitterSettingsLabel = new javax.swing.JLabel();
        particleSettingsLabel = new javax.swing.JLabel();
        startXLabel = new javax.swing.JLabel();
        startXLowSpinner = new javax.swing.JSpinner();
        toLabel2 = new javax.swing.JLabel();
        startXHighSpinner = new javax.swing.JSpinner();
        startYLabel = new javax.swing.JLabel();
        startYLowSpinner = new javax.swing.JSpinner();
        toLabel3 = new javax.swing.JLabel();
        startYHighSpinner = new javax.swing.JSpinner();
        startVelXLabel = new javax.swing.JLabel();
        startVelXLowSpinner = new javax.swing.JSpinner();
        toLabel4 = new javax.swing.JLabel();
        startVelXHighSpinner = new javax.swing.JSpinner();
        startVelYLabel = new javax.swing.JLabel();
        startVelYLowSpinner = new javax.swing.JSpinner();
        toLabel5 = new javax.swing.JLabel();
        startVelYHighSpinner = new javax.swing.JSpinner();
        startSizeLabel = new javax.swing.JLabel();
        startSizeLowSpinner = new javax.swing.JSpinner();
        toLabel6 = new javax.swing.JLabel();
        startSizeHighSpinner = new javax.swing.JSpinner();
        endSizeLabel = new javax.swing.JLabel();
        endSizeLowSpinner = new javax.swing.JSpinner();
        toLabel7 = new javax.swing.JLabel();
        endSizeHighSpinner = new javax.swing.JSpinner();
        lifeLabel = new javax.swing.JLabel();
        lifeLowSpinner = new javax.swing.JSpinner();
        toLabel8 = new javax.swing.JLabel();
        lifeHighSpinner = new javax.swing.JSpinner();
        particleRateLabel = new javax.swing.JLabel();
        particleRateLowSpinner = new javax.swing.JSpinner();
        toLabel1 = new javax.swing.JLabel();
        particleRateHighSpinner = new javax.swing.JSpinner();
        colorsLabel = new javax.swing.JLabel();
        gradientHousingPanel = new javax.swing.JPanel();
        imageLabel = new javax.swing.JLabel();
        imageLocationField = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        imageDisplayHousingPanel = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        emitterStartXSpinner = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        emitterStartYSpinner = new javax.swing.JSpinner();
        jSeparator2 = new javax.swing.JSeparator();
        waitTimeLabel = new javax.swing.JLabel();
        waitTimeLowSpinner = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();
        waitTimeHighSpinner = new javax.swing.JSpinner();

        jLabel4.setText("to");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        activeCheckBox.setText("Active");
        activeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                activeCheckBoxActionPerformed(evt);
            }
        });

        blendModeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blendModeComboBoxActionPerformed(evt);
            }
        });

        blendingModeLabel.setText("Blending Mode:");

        canDieCheckBox.setText("Can Die");
        canDieCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                canDieCheckBoxActionPerformed(evt);
            }
        });

        repeatCheckBox.setText("Repeat");
        repeatCheckBox.setEnabled(false);
        repeatCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                repeatCheckBoxActionPerformed(evt);
            }
        });

        emitterLifeLabel.setText("Emitter Life:");
        emitterLifeLabel.setEnabled(false);

        emitterLifeSpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(1000.0f), Float.valueOf(0.0f), null, Float.valueOf(10.0f)));
        emitterLifeSpinner.setEnabled(false);
        emitterLifeSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                emitterLifeSpinnerStateChanged(evt);
            }
        });

        delayLabel.setText("Delay:");

        delaySpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.0f), Float.valueOf(0.0f), null, Float.valueOf(10.0f)));
        delaySpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                delaySpinnerStateChanged(evt);
            }
        });

        emitterSettingsLabel.setText("Static Emitter Settings:");

        particleSettingsLabel.setText("Particle Settings:");

        startXLabel.setText("Start X:");

        startXLowSpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(-5.0f), null, null, Float.valueOf(1.0f)));
        startXLowSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                startXLowSpinnerStateChanged(evt);
            }
        });

        toLabel2.setText("to");

        startXHighSpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(5.0f), null, null, Float.valueOf(1.0f)));
        startXHighSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                startXHighSpinnerStateChanged(evt);
            }
        });

        startYLabel.setText("Start Y:");

        startYLowSpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(-5.0f), null, null, Float.valueOf(1.0f)));
        startYLowSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                startYLowSpinnerStateChanged(evt);
            }
        });

        toLabel3.setText("to");

        startYHighSpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(5.0f), null, null, Float.valueOf(1.0f)));
        startYHighSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                startYHighSpinnerStateChanged(evt);
            }
        });

        startVelXLabel.setText("Start Velocity X:");

        startVelXLowSpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(-2.0f), null, null, Float.valueOf(1.0f)));
        startVelXLowSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                startVelXLowSpinnerStateChanged(evt);
            }
        });

        toLabel4.setText("to");

        startVelXHighSpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(2.0f), null, null, Float.valueOf(1.0f)));
        startVelXHighSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                startVelXHighSpinnerStateChanged(evt);
            }
        });

        startVelYLabel.setText("Start Velocity Y:");

        startVelYLowSpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(-2.0f), null, null, Float.valueOf(1.0f)));
        startVelYLowSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                startVelYLowSpinnerStateChanged(evt);
            }
        });

        toLabel5.setText("to");

        startVelYHighSpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(2.0f), null, null, Float.valueOf(1.0f)));
        startVelYHighSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                startVelYHighSpinnerStateChanged(evt);
            }
        });

        startSizeLabel.setText("Start Size:");

        startSizeLowSpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(30.0f), Float.valueOf(0.0f), Float.valueOf(1000.0f), Float.valueOf(1.0f)));
        startSizeLowSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                startSizeLowSpinnerStateChanged(evt);
            }
        });

        toLabel6.setText("to");

        startSizeHighSpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(40.0f), Float.valueOf(0.0f), Float.valueOf(1000.0f), Float.valueOf(1.0f)));
        startSizeHighSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                startSizeHighSpinnerStateChanged(evt);
            }
        });

        endSizeLabel.setText("End Size:");

        endSizeLowSpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(10.0f), Float.valueOf(0.0f), Float.valueOf(1000.0f), Float.valueOf(1.0f)));
        endSizeLowSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                endSizeLowSpinnerStateChanged(evt);
            }
        });

        toLabel7.setText("to");

        endSizeHighSpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(15.0f), Float.valueOf(0.0f), Float.valueOf(1000.0f), Float.valueOf(1.0f)));
        endSizeHighSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                endSizeHighSpinnerStateChanged(evt);
            }
        });

        lifeLabel.setText("Life:");

        lifeLowSpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(2500.0f), Float.valueOf(0.0f), Float.valueOf(20000.0f), Float.valueOf(100.0f)));
        lifeLowSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                lifeLowSpinnerStateChanged(evt);
            }
        });

        toLabel8.setText("to");

        lifeHighSpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(3000.0f), Float.valueOf(0.0f), Float.valueOf(20000.0f), Float.valueOf(100.0f)));
        lifeHighSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                lifeHighSpinnerStateChanged(evt);
            }
        });

        particleRateLabel.setText("Particle Rate:");

        particleRateLowSpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(150.0f), Float.valueOf(0.0f), Float.valueOf(5000.0f), Float.valueOf(10.0f)));
        particleRateLowSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                particleRateLowSpinnerStateChanged(evt);
            }
        });

        toLabel1.setText("to");

        particleRateHighSpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(200.0f), Float.valueOf(0.0f), Float.valueOf(5000.0f), Float.valueOf(10.0f)));
        particleRateHighSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                particleRateHighSpinnerStateChanged(evt);
            }
        });

        colorsLabel.setText("Colors:");

        gradientHousingPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        gradientHousingPanel.setMaximumSize(new java.awt.Dimension(32767, 110));
        gradientHousingPanel.setMinimumSize(new java.awt.Dimension(0, 110));
        gradientHousingPanel.setPreferredSize(new java.awt.Dimension(0, 110));

        javax.swing.GroupLayout gradientHousingPanelLayout = new javax.swing.GroupLayout(gradientHousingPanel);
        gradientHousingPanel.setLayout(gradientHousingPanelLayout);
        gradientHousingPanelLayout.setHorizontalGroup(
            gradientHousingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        gradientHousingPanelLayout.setVerticalGroup(
            gradientHousingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 110, Short.MAX_VALUE)
        );

        imageLabel.setText("Image:");

        imageLocationField.setText("resources/images/particle1.png");
        imageLocationField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imageLocationFieldActionPerformed(evt);
            }
        });

        browseButton.setText("Browse");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        imageDisplayHousingPanel.setPreferredSize(new java.awt.Dimension(64, 64));

        javax.swing.GroupLayout imageDisplayHousingPanelLayout = new javax.swing.GroupLayout(imageDisplayHousingPanel);
        imageDisplayHousingPanel.setLayout(imageDisplayHousingPanelLayout);
        imageDisplayHousingPanelLayout.setHorizontalGroup(
            imageDisplayHousingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );
        imageDisplayHousingPanelLayout.setVerticalGroup(
            imageDisplayHousingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );

        jLabel20.setText("Preview:");

        jLabel1.setText("X Offset:");

        emitterStartXSpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.0f), null, null, Float.valueOf(1.0f)));
        emitterStartXSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                emitterStartXSpinnerStateChanged(evt);
            }
        });

        jLabel2.setText("Y Offset:");

        emitterStartYSpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.0f), null, null, Float.valueOf(1.0f)));
        emitterStartYSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                emitterStartYSpinnerStateChanged(evt);
            }
        });

        waitTimeLabel.setText("Wait Time:");

        waitTimeLowSpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.0f), Float.valueOf(0.0f), null, Float.valueOf(100.0f)));
        waitTimeLowSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                waitTimeLowSpinnerStateChanged(evt);
            }
        });

        jLabel7.setText("to");

        waitTimeHighSpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.0f), Float.valueOf(0.0f), null, Float.valueOf(100.0f)));
        waitTimeHighSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                waitTimeHighSpinnerStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(gradientHousingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
                    .addComponent(jSeparator2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(blendingModeLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(blendModeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(activeCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(canDieCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(repeatCheckBox))
                            .addComponent(emitterSettingsLabel)
                            .addComponent(colorsLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(imageLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(imageLocationField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(browseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(particleSettingsLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(startYLabel)
                                        .addGap(18, 18, 18)
                                        .addComponent(startYLowSpinner))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(startXLabel)
                                        .addGap(18, 18, 18)
                                        .addComponent(startXLowSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(toLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(startYHighSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(toLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(startXHighSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(startSizeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(endSizeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(endSizeLowSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(toLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(endSizeHighSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(startSizeLowSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(toLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(startSizeHighSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lifeLowSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(toLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(lifeHighSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(lifeLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(startVelYLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(startVelYLowSpinner))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(startVelXLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(startVelXLowSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(toLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(startVelXHighSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(toLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(startVelYHighSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel20)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(imageDisplayHousingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(emitterStartXSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(emitterStartYSpinner))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(waitTimeLabel)
                                        .addGap(18, 18, 18)
                                        .addComponent(waitTimeLowSpinner))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(particleRateLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(particleRateLowSpinner))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(emitterLifeLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(emitterLifeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(delayLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(delaySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel7)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(waitTimeHighSpinner))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(toLabel1)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(particleRateHighSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(emitterSettingsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(activeCheckBox)
                    .addComponent(canDieCheckBox)
                    .addComponent(repeatCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(blendingModeLabel)
                    .addComponent(blendModeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emitterLifeLabel)
                    .addComponent(emitterLifeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(delayLabel)
                    .addComponent(delaySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(particleRateLabel)
                    .addComponent(particleRateLowSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toLabel1)
                    .addComponent(particleRateHighSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(waitTimeLabel)
                    .addComponent(waitTimeLowSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(waitTimeHighSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(imageLabel)
                    .addComponent(imageLocationField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(emitterStartXSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(emitterStartYSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel20)
                    .addComponent(imageDisplayHousingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addComponent(colorsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gradientHousingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(particleSettingsLabel)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startXLabel)
                    .addComponent(startXLowSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toLabel2)
                    .addComponent(startXHighSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startYLabel)
                    .addComponent(startYLowSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toLabel3)
                    .addComponent(startYHighSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startVelXLabel)
                    .addComponent(startVelXLowSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toLabel4)
                    .addComponent(startVelXHighSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startVelYLabel)
                    .addComponent(startVelYLowSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toLabel5)
                    .addComponent(startVelYHighSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startSizeLabel)
                    .addComponent(startSizeLowSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toLabel6)
                    .addComponent(startSizeHighSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(endSizeLabel)
                    .addComponent(endSizeLowSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toLabel7)
                    .addComponent(endSizeHighSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lifeLabel)
                    .addComponent(lifeLowSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toLabel8)
                    .addComponent(lifeHighSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void canDieCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_canDieCheckBoxActionPerformed
        boolean selected = canDieCheckBox.isSelected();
        repeatCheckBox.setEnabled(selected);
        emitterLifeLabel.setEnabled(selected);
        emitterLifeSpinner.setEnabled(selected);
        emitter.setCanDie(selected);
    }//GEN-LAST:event_canDieCheckBoxActionPerformed

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new FileNameExtensionFilter("Images (.png, .jpg)", "png", "jpg", "jpeg"));
        int opt = fileChooser.showOpenDialog(null);
        if (opt == JFileChooser.APPROVE_OPTION) {
            try {
                final File f = fileChooser.getSelectedFile();
                String s = f.getCanonicalPath();
                setImage(s);
            } catch (IOException ex) {
                throw new GameException(ex);
            }

        }
    }//GEN-LAST:event_browseButtonActionPerformed

    private void imageLocationFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imageLocationFieldActionPerformed
        String ref = imageLocationField.getText();
        try {
            iResource res = ResourceManager.getDefault().getResource(ref);
            if (res.exists() && res.canRead()) {
                setImage(ref);
                return;
            }
        } catch (ResourceException ex) {}
        imageLocationField.setText(imgRef);
    }//GEN-LAST:event_imageLocationFieldActionPerformed

    private void blendModeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blendModeComboBoxActionPerformed
       String s =  blendModeComboBox.getSelectedItem().toString();
       emitter.setBlendingMode(Graphics.BlendingMode.valueOf(s));
    }//GEN-LAST:event_blendModeComboBoxActionPerformed

    private void particleRateLowSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_particleRateLowSpinnerStateChanged
        float low = (float)particleRateLowSpinner.getValue();
        float high = (float)particleRateHighSpinner.getValue();
        if (low > high)
            particleRateHighSpinner.setValue(low);
        else
            emitter.setParticleRate(new FloatRange(low, high));
    }//GEN-LAST:event_particleRateLowSpinnerStateChanged

    private void particleRateHighSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_particleRateHighSpinnerStateChanged
        float low = (float)particleRateLowSpinner.getValue();
        float high = (float)particleRateHighSpinner.getValue();
        if (high < low)
            particleRateLowSpinner.setValue(high);
        else
            emitter.setParticleRate(new FloatRange(low, high));
    }//GEN-LAST:event_particleRateHighSpinnerStateChanged

    private void emitterStartXSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_emitterStartXSpinnerStateChanged
        emitter.setEmitterPos((float)emitterStartXSpinner.getValue(), emitter.getEmitterPosY());
    }//GEN-LAST:event_emitterStartXSpinnerStateChanged

    private void emitterStartYSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_emitterStartYSpinnerStateChanged
        emitter.setEmitterPos(emitter.getEmitterPosX(), (float)emitterStartYSpinner.getValue());
    }//GEN-LAST:event_emitterStartYSpinnerStateChanged

    private void emitterLifeSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_emitterLifeSpinnerStateChanged
        emitter.setEmitterLife((float)emitterLifeSpinner.getValue()/1000);
    }//GEN-LAST:event_emitterLifeSpinnerStateChanged

    private void delaySpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_delaySpinnerStateChanged
        emitter.setEmitterDelay((float)delaySpinner.getValue()/1000);
    }//GEN-LAST:event_delaySpinnerStateChanged

    private void activeCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_activeCheckBoxActionPerformed
        emitter.setActive(activeCheckBox.isSelected());
    }//GEN-LAST:event_activeCheckBoxActionPerformed

    private void repeatCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_repeatCheckBoxActionPerformed
        emitter.setRepeats(repeatCheckBox.isSelected());
    }//GEN-LAST:event_repeatCheckBoxActionPerformed

    private void startXLowSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_startXLowSpinnerStateChanged
        float low = (float)startXLowSpinner.getValue();
        float high = (float)startXHighSpinner.getValue();
        if (low > high)
            startXHighSpinner.setValue(low);
        else
            emitter.setStartPosX(new FloatRange(low, high));
    }//GEN-LAST:event_startXLowSpinnerStateChanged

    private void startXHighSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_startXHighSpinnerStateChanged
        float low = (float)startXLowSpinner.getValue();
        float high = (float)startXHighSpinner.getValue();
        if (low > high)
            startXLowSpinner.setValue(high);
        else
            emitter.setStartPosX(new FloatRange(low, high));
    }//GEN-LAST:event_startXHighSpinnerStateChanged

    private void startYLowSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_startYLowSpinnerStateChanged
        float low = (float)startYLowSpinner.getValue();
        float high = (float)startYHighSpinner.getValue();
        if (low > high)
            startYHighSpinner.setValue(low);
        else
            emitter.setStartPosY(new FloatRange(low, high));
    }//GEN-LAST:event_startYLowSpinnerStateChanged

    private void startYHighSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_startYHighSpinnerStateChanged
        float low = (float)startYLowSpinner.getValue();
        float high = (float)startYHighSpinner.getValue();
        if (low > high)
            startYLowSpinner.setValue(high);
        else
            emitter.setStartPosY(new FloatRange(low, high));
    }//GEN-LAST:event_startYHighSpinnerStateChanged

    private void startVelXLowSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_startVelXLowSpinnerStateChanged
        float low = (float)startVelXLowSpinner.getValue();
        float high = (float)startVelXHighSpinner.getValue();
        if (low > high)
            startVelXHighSpinner.setValue(low);
        else
            emitter.setStartVelocityX(new FloatRange(low, high));
    }//GEN-LAST:event_startVelXLowSpinnerStateChanged

    private void startVelXHighSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_startVelXHighSpinnerStateChanged
        float low = (float)startVelXLowSpinner.getValue();
        float high = (float)startVelXHighSpinner.getValue();
        if (low > high)
            startVelXLowSpinner.setValue(high);
        else
            emitter.setStartVelocityX(new FloatRange(low, high));
    }//GEN-LAST:event_startVelXHighSpinnerStateChanged

    private void startVelYLowSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_startVelYLowSpinnerStateChanged
        float low = (float)startVelYLowSpinner.getValue();
        float high = (float)startVelYHighSpinner.getValue();
        if (low > high)
            startVelYHighSpinner.setValue(low);
        else
            emitter.setStartVelocityY(new FloatRange(low, high));
    }//GEN-LAST:event_startVelYLowSpinnerStateChanged

    private void startVelYHighSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_startVelYHighSpinnerStateChanged
        float low = (float)startVelYLowSpinner.getValue();
        float high = (float)startVelYHighSpinner.getValue();
        if (low > high)
            startVelYLowSpinner.setValue(high);
        else
            emitter.setStartVelocityY(new FloatRange(low, high));
    }//GEN-LAST:event_startVelYHighSpinnerStateChanged

    private void startSizeLowSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_startSizeLowSpinnerStateChanged
        float low = (float)startSizeLowSpinner.getValue();
        float high = (float)startSizeHighSpinner.getValue();
        if (low > high)
            startSizeHighSpinner.setValue(low);
        else
            emitter.setStartSize(new FloatRange(low, high));
    }//GEN-LAST:event_startSizeLowSpinnerStateChanged

    private void startSizeHighSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_startSizeHighSpinnerStateChanged
        float low = (float)startSizeLowSpinner.getValue();
        float high = (float)startSizeHighSpinner.getValue();
        if (low > high)
            startSizeLowSpinner.setValue(high);
        else
            emitter.setStartSize(new FloatRange(low, high));
    }//GEN-LAST:event_startSizeHighSpinnerStateChanged

    private void endSizeLowSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_endSizeLowSpinnerStateChanged
        float low = (float)endSizeLowSpinner.getValue();
        float high = (float)endSizeHighSpinner.getValue();
        if (low > high)
            endSizeHighSpinner.setValue(low);
        else
            emitter.setEndSize(new FloatRange(low, high));
    }//GEN-LAST:event_endSizeLowSpinnerStateChanged

    private void endSizeHighSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_endSizeHighSpinnerStateChanged
        float low = (float)endSizeLowSpinner.getValue();
        float high = (float)endSizeHighSpinner.getValue();
        if (low > high)
            endSizeLowSpinner.setValue(high);
        else
            emitter.setEndSize(new FloatRange(low, high));
    }//GEN-LAST:event_endSizeHighSpinnerStateChanged

    private void lifeLowSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_lifeLowSpinnerStateChanged
        float low = (float)lifeLowSpinner.getValue();
        float high = (float)lifeHighSpinner.getValue();
        if (low > high)
            lifeHighSpinner.setValue(low);
        else
            emitter.setParticleLife(new FloatRange(low/1000, high/1000));
    }//GEN-LAST:event_lifeLowSpinnerStateChanged

    private void lifeHighSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_lifeHighSpinnerStateChanged
        float low = (float)lifeLowSpinner.getValue();
        float high = (float)lifeHighSpinner.getValue();
        if (low > high)
            lifeLowSpinner.setValue(high);
        else
            emitter.setParticleLife(new FloatRange(low/1000, high/1000));
    }//GEN-LAST:event_lifeHighSpinnerStateChanged

    private void waitTimeLowSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_waitTimeLowSpinnerStateChanged
        float low = (float)waitTimeLowSpinner.getValue();
        float high = (float)waitTimeHighSpinner.getValue();
        if (low > high)
            waitTimeHighSpinner.setValue(low);
        else
            emitter.setWaitPeriod(new FloatRange(low/1000, high/1000));
    }//GEN-LAST:event_waitTimeLowSpinnerStateChanged

    private void waitTimeHighSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_waitTimeHighSpinnerStateChanged
        float low = (float)waitTimeLowSpinner.getValue();
        float high = (float)waitTimeHighSpinner.getValue();
        if (low > high)
            waitTimeLowSpinner.setValue(high);
        else
            emitter.setWaitPeriod(new FloatRange(low/1000, high/1000));
    }//GEN-LAST:event_waitTimeHighSpinnerStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox activeCheckBox;
    private javax.swing.JComboBox blendModeComboBox;
    private javax.swing.JLabel blendingModeLabel;
    private javax.swing.JButton browseButton;
    private javax.swing.JCheckBox canDieCheckBox;
    private javax.swing.JLabel colorsLabel;
    private javax.swing.JLabel delayLabel;
    private javax.swing.JSpinner delaySpinner;
    private javax.swing.JLabel emitterLifeLabel;
    private javax.swing.JSpinner emitterLifeSpinner;
    private javax.swing.JLabel emitterSettingsLabel;
    private javax.swing.JSpinner emitterStartXSpinner;
    private javax.swing.JSpinner emitterStartYSpinner;
    private javax.swing.JSpinner endSizeHighSpinner;
    private javax.swing.JLabel endSizeLabel;
    private javax.swing.JSpinner endSizeLowSpinner;
    private javax.swing.JPanel gradientHousingPanel;
    private javax.swing.JPanel imageDisplayHousingPanel;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JTextField imageLocationField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSpinner jSpinner3;
    private javax.swing.JSpinner jSpinner4;
    private javax.swing.JSpinner jSpinner6;
    private javax.swing.JSpinner lifeHighSpinner;
    private javax.swing.JLabel lifeLabel;
    private javax.swing.JSpinner lifeLowSpinner;
    private javax.swing.JSpinner particleRateHighSpinner;
    private javax.swing.JLabel particleRateLabel;
    private javax.swing.JSpinner particleRateLowSpinner;
    private javax.swing.JLabel particleSettingsLabel;
    private javax.swing.JCheckBox repeatCheckBox;
    private javax.swing.JSpinner startSizeHighSpinner;
    private javax.swing.JLabel startSizeLabel;
    private javax.swing.JSpinner startSizeLowSpinner;
    private javax.swing.JSpinner startVelXHighSpinner;
    private javax.swing.JLabel startVelXLabel;
    private javax.swing.JSpinner startVelXLowSpinner;
    private javax.swing.JSpinner startVelYHighSpinner;
    private javax.swing.JLabel startVelYLabel;
    private javax.swing.JSpinner startVelYLowSpinner;
    private javax.swing.JSpinner startXHighSpinner;
    private javax.swing.JLabel startXLabel;
    private javax.swing.JSpinner startXLowSpinner;
    private javax.swing.JSpinner startYHighSpinner;
    private javax.swing.JLabel startYLabel;
    private javax.swing.JSpinner startYLowSpinner;
    private javax.swing.JLabel toLabel1;
    private javax.swing.JLabel toLabel2;
    private javax.swing.JLabel toLabel3;
    private javax.swing.JLabel toLabel4;
    private javax.swing.JLabel toLabel5;
    private javax.swing.JLabel toLabel6;
    private javax.swing.JLabel toLabel7;
    private javax.swing.JLabel toLabel8;
    private javax.swing.JSpinner waitTimeHighSpinner;
    private javax.swing.JLabel waitTimeLabel;
    private javax.swing.JSpinner waitTimeLowSpinner;
    // End of variables declaration//GEN-END:variables

    private ImageParticleEmitter emitter;
    private ImageDisplay imageDisplay;
    private GradientEditor gradientEditor;
    private Game game;
    private String imgRef;

    @Override
    public void init(final ParticleDisplay pd) {
        game = pd;
        emitter = new ImageParticleEmitter();
        setImage(defaultImage);
        initEmitter();
        game.inject(new iGameRunnable() {
            @Override
            public void run(Game g) {
                emitter.setImage(defaultImage);
                pd.getEffect().addEmitter(emitter);
            }
        });
        try {
            imageLocationField.setText(defaultImage);
            imageDisplay.setImage(ImageIO.read(ResourceManager.getDefault().getResource(defaultImage).openRead()));
            imgRef = defaultImage;
        } catch (IOException ex) {
            throw new GameException(ex);
        }
    }

    private void initEmitter() {
        emitter.setActive(activeCheckBox.isSelected());
        emitter.setCanDie(canDieCheckBox.isSelected());
        emitter.setRepeats(repeatCheckBox.isSelected());
        emitter.setStartPosX(new FloatRange((float)startXLowSpinner.getValue(), (float)startXHighSpinner.getValue()));
        emitter.setStartPosY(new FloatRange((float)startYLowSpinner.getValue(), (float)startYHighSpinner.getValue()));
        emitter.setStartVelocityX(new FloatRange((float)startVelXLowSpinner.getValue(), (float)startVelXHighSpinner.getValue()));
        emitter.setStartVelocityY(new FloatRange((float)startVelYLowSpinner.getValue(), (float)startVelYHighSpinner.getValue()));
        emitter.setStartSize(new FloatRange((float)startSizeLowSpinner.getValue(), (float)startSizeHighSpinner.getValue()));
        emitter.setEndSize(new FloatRange((float)endSizeLowSpinner.getValue(), (float)endSizeHighSpinner.getValue()));
        emitter.setParticleLife(new FloatRange((float)lifeLowSpinner.getValue()/1000, (float)lifeHighSpinner.getValue()/1000));
        emitter.setEmitterDelay((float)delaySpinner.getValue()/1000);
        emitter.setEmitterLife((float)emitterLifeSpinner.getValue()/1000);
        emitter.setEmitterPos(
                (float)emitterStartXSpinner.getValue(),
                (float)emitterStartYSpinner.getValue()
                );
        emitter.setParticleRate(new FloatRange((float)particleRateLowSpinner.getValue(), (float)particleRateHighSpinner.getValue()));
        emitter.setWaitPeriod(new FloatRange((float)waitTimeLowSpinner.getValue()/1000, (float)waitTimeHighSpinner.getValue()/1000));
        updateGradient();
    }

    private void setImage(final String img) {
        game.inject(new iGameRunnable() {
            @Override
            public void run(Game g) {
                emitter.setImage(img);
            }
        });
        try {
            imageLocationField.setText(img);
            imageDisplay.setImage(ImageIO.read(ResourceManager.getDefault().getResource(img).openRead()));
            imgRef = img;
        } catch (IOException ex) {
            throw new GameException(ex);
        }
    }

    @Override
    public void deinit(ParticleDisplay g) {
        g.getEffect().removeEmitter(emitter);
    }
}
