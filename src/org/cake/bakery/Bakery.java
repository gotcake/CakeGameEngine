/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.cake.bakery;

import java.awt.Color;
import java.awt.Component;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import org.cake.game.Game;
import org.cake.game.Log;
import org.cake.game.iGameRunnable;
import org.cake.game.particle.ParticleEffect;
import org.cake.game.particle.iParticleEmitter_Old;

/**
 *
 * @author Aaron
 */
public class Bakery extends javax.swing.JFrame {

    /**
     * Creates new form Bakery
     */
    public Bakery() {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception ex) { }
        initComponents();
        setLocationRelativeTo(null);
        display = new ParticleDisplay(gameHosuingPanel);
        initEffect();
        gameHosuingPanel.validate();
        display.start();
        display.inject(new iGameRunnable() {
            @Override
            public void run(Game g) {
                addEmitter(new ImageEmitterPanel());
                display.getEffect().start();
            }
        });
        Log.getDefault().setIgnoreLevel(Log.IGNORE_DEBUG);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        effectControlPanel = new javax.swing.JPanel();
        gravityLabel = new javax.swing.JLabel();
        gravitySlider = new javax.swing.JSlider();
        windLabel = new javax.swing.JLabel();
        windSlider = new javax.swing.JSlider();
        emitterTabbedPane = new javax.swing.JTabbedPane();
        effectSettingsLabel = new javax.swing.JLabel();
        loopCheckBox = new javax.swing.JCheckBox();
        playButton = new javax.swing.JButton();
        pauseButton = new javax.swing.JToggleButton();
        moveTabRightButton = new javax.swing.JButton();
        moveTabLeftButton = new javax.swing.JButton();
        gravitySpinner = new javax.swing.JSpinner();
        windSpinner = new javax.swing.JSpinner();
        emitterDeleterButton = new javax.swing.JButton();
        emitterAdderComboBox = new javax.swing.JComboBox();
        fixedCheckBox = new javax.swing.JCheckBox();
        gameHosuingPanel = new javax.swing.JPanel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        newMenuItem = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        quitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        jMenu1 = new javax.swing.JMenu();
        newStaticEmitterMenuItem = new javax.swing.JMenuItem();
        newDynamicEmitterMenuItem = new javax.swing.JMenuItem();
        deleteEmitterMenuItem = new javax.swing.JMenuItem();
        pauseEffectMenuItem = new javax.swing.JCheckBoxMenuItem();
        resetEffectMenuItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        bgColorMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 876, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 46, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("The Bakery");

        gravityLabel.setText("Gravity:");

        gravitySlider.setMaximum(150);
        gravitySlider.setMinimum(-150);
        gravitySlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                gravitySliderStateChanged(evt);
            }
        });

        windLabel.setText("Wind:");

        windSlider.setMaximum(150);
        windSlider.setMinimum(-150);
        windSlider.setValue(0);
        windSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                windSliderStateChanged(evt);
            }
        });

        emitterTabbedPane.setBackground(new java.awt.Color(238, 238, 238));

        effectSettingsLabel.setText("Effect Settings:");

        loopCheckBox.setSelected(true);
        loopCheckBox.setText("Loop");
        loopCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loopCheckBoxActionPerformed(evt);
            }
        });

        playButton.setText("Reset");
        playButton.setFocusable(false);
        playButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        playButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });

        pauseButton.setText("Pause");
        pauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseButtonActionPerformed(evt);
            }
        });

        moveTabRightButton.setText(">");
        moveTabRightButton.setMaximumSize(new java.awt.Dimension(41, 18));
        moveTabRightButton.setMinimumSize(new java.awt.Dimension(41, 18));
        moveTabRightButton.setPreferredSize(new java.awt.Dimension(41, 18));
        moveTabRightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveTabRightButtonActionPerformed(evt);
            }
        });

        moveTabLeftButton.setText("<");
        moveTabLeftButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveTabLeftButtonActionPerformed(evt);
            }
        });

        gravitySpinner.setModel(new javax.swing.SpinnerNumberModel(50, -150, 150, 1));
        gravitySpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                gravitySpinnerStateChanged(evt);
            }
        });

        windSpinner.setModel(new javax.swing.SpinnerNumberModel(0, -150, 150, 1));
        windSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                windSpinnerStateChanged(evt);
            }
        });

        emitterDeleterButton.setText("Delete");
        emitterDeleterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emitterDeleterButtonActionPerformed(evt);
            }
        });

        emitterAdderComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "New Emitter...", "Static Emitter", "Dynamic Emitter" }));
        emitterAdderComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emitterAdderComboBoxActionPerformed(evt);
            }
        });

        fixedCheckBox.setText("Fixed");
        fixedCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fixedCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout effectControlPanelLayout = new javax.swing.GroupLayout(effectControlPanel);
        effectControlPanel.setLayout(effectControlPanelLayout);
        effectControlPanelLayout.setHorizontalGroup(
            effectControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(emitterTabbedPane)
            .addGroup(effectControlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(effectControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(effectControlPanelLayout.createSequentialGroup()
                        .addGroup(effectControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(effectControlPanelLayout.createSequentialGroup()
                                .addGroup(effectControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(gravityLabel)
                                    .addComponent(windLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(effectControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(gravitySlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(windSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(effectControlPanelLayout.createSequentialGroup()
                                .addComponent(effectSettingsLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(loopCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fixedCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(playButton)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(effectControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(gravitySpinner)
                            .addComponent(pauseButton, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(windSpinner, javax.swing.GroupLayout.Alignment.LEADING))
                        .addContainerGap())
                    .addGroup(effectControlPanelLayout.createSequentialGroup()
                        .addComponent(moveTabLeftButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(moveTabRightButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(emitterAdderComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(emitterDeleterButton)
                        .addGap(21, 21, 21))))
        );
        effectControlPanelLayout.setVerticalGroup(
            effectControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(effectControlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(effectControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(effectControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(effectSettingsLabel)
                        .addComponent(loopCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(fixedCheckBox))
                    .addComponent(pauseButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(playButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(effectControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(effectControlPanelLayout.createSequentialGroup()
                        .addComponent(gravityLabel)
                        .addGap(18, 18, 18)
                        .addComponent(windLabel))
                    .addGroup(effectControlPanelLayout.createSequentialGroup()
                        .addComponent(gravitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(windSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(effectControlPanelLayout.createSequentialGroup()
                        .addComponent(gravitySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(windSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(effectControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(moveTabLeftButton, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(moveTabRightButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(emitterAdderComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emitterDeleterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(emitterTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 755, Short.MAX_VALUE))
        );

        gameHosuingPanel.setLayout(new java.awt.BorderLayout());

        fileMenu.setText("File");

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem5.setText("Open...");
        fileMenu.add(jMenuItem5);

        newMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newMenuItem.setText("New");
        newMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(newMenuItem);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Save As...");
        fileMenu.add(jMenuItem3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("Save");
        fileMenu.add(jMenuItem4);

        quitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        quitMenuItem.setText("Quit");
        quitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(quitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setText("Effect");

        jMenu1.setText("New Emitter...");

        newStaticEmitterMenuItem.setText("New Static Emitter");
        newStaticEmitterMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newStaticEmitterMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(newStaticEmitterMenuItem);

        newDynamicEmitterMenuItem.setText("New Dynamic Emitter");
        newDynamicEmitterMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newDynamicEmitterMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(newDynamicEmitterMenuItem);

        editMenu.add(jMenu1);

        deleteEmitterMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        deleteEmitterMenuItem.setText("Delete Emitter");
        deleteEmitterMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteEmitterMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(deleteEmitterMenuItem);

        pauseEffectMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        pauseEffectMenuItem.setText("Pause Effect");
        pauseEffectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseEffectMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(pauseEffectMenuItem);

        resetEffectMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        resetEffectMenuItem.setText("Reset Effect");
        resetEffectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetEffectMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(resetEffectMenuItem);

        menuBar.add(editMenu);

        jMenu2.setText("View");

        bgColorMenuItem.setText("Change Background Color...");
        bgColorMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bgColorMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(bgColorMenuItem);

        menuBar.add(jMenu2);

        helpMenu.setText("Help");

        jMenuItem8.setText("About");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        helpMenu.add(jMenuItem8);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(effectControlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gameHosuingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 757, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(effectControlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(gameHosuingPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
        display.getEffect().start();
        pauseButton.setSelected(false);
    }//GEN-LAST:event_playButtonActionPerformed

    private void loopCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loopCheckBoxActionPerformed
        display.getEffect().setLoop(loopCheckBox.isSelected());
    }//GEN-LAST:event_loopCheckBoxActionPerformed

    private void gravitySliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_gravitySliderStateChanged
        display.getEffect().setGravity(gravitySlider.getValue());
        gravitySpinner.setValue(gravitySlider.getValue());
    }//GEN-LAST:event_gravitySliderStateChanged

    private void windSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_windSliderStateChanged
        display.getEffect().setWind(windSlider.getValue());
        windSpinner.setValue(windSlider.getValue());
    }//GEN-LAST:event_windSliderStateChanged

    private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseButtonActionPerformed
        ParticleEffect effect = display.getEffect();
        if (pauseButton.isSelected()) {
            pauseButton.setText("Resume");
            effect.pause();
        } else {
            effect.resume();
            pauseButton.setText("Pause");
        }
        pauseEffectMenuItem.setSelected(pauseButton.isSelected());
    }//GEN-LAST:event_pauseButtonActionPerformed

    private void deleteEmitterMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteEmitterMenuItemActionPerformed
        deleteEffect();
    }//GEN-LAST:event_deleteEmitterMenuItemActionPerformed

    private void quitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitMenuItemActionPerformed
        quit();
    }//GEN-LAST:event_quitMenuItemActionPerformed

    private void moveTabLeftButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveTabLeftButtonActionPerformed
        int index = emitterTabbedPane.getSelectedIndex();
        if (index == -1 || index == 0) return;
        String title = emitterTabbedPane.getTitleAt(index);
        Component c = emitterTabbedPane.getComponentAt(index);
        emitterTabbedPane.removeTabAt(index);
        emitterTabbedPane.add(c, title, index - 1);
        emitterTabbedPane.setSelectedIndex(index - 1);
        List<iParticleEmitter_Old> list = display.getEffect().getEmitters();
        list.add(index-1, list.remove(index));
    }//GEN-LAST:event_moveTabLeftButtonActionPerformed

    private void moveTabRightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveTabRightButtonActionPerformed
        int index = emitterTabbedPane.getSelectedIndex();
        if (index == -1 || index  + 1 == emitterTabbedPane.getTabCount()) return;
        String title = emitterTabbedPane.getTitleAt(index);
        Component c = emitterTabbedPane.getComponentAt(index);
        emitterTabbedPane.removeTabAt(index);
        emitterTabbedPane.add(c, title, index + 1);
        emitterTabbedPane.setSelectedIndex(index + 1);
        List<iParticleEmitter_Old> list = display.getEffect().getEmitters();
        list.add(index+1, list.remove(index));
    }//GEN-LAST:event_moveTabRightButtonActionPerformed

    private void gravitySpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_gravitySpinnerStateChanged
        display.getEffect().setGravity((int)gravitySpinner.getValue());
        gravitySlider.setValue((int)gravitySpinner.getValue());
    }//GEN-LAST:event_gravitySpinnerStateChanged

    private void windSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_windSpinnerStateChanged
        display.getEffect().setWind((int)windSpinner.getValue());
        windSlider.setValue((int)windSpinner.getValue());
    }//GEN-LAST:event_windSpinnerStateChanged

    private void emitterDeleterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emitterDeleterButtonActionPerformed
        deleteEffect();
    }//GEN-LAST:event_emitterDeleterButtonActionPerformed

    private void emitterAdderComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emitterAdderComboBoxActionPerformed
        int i = emitterAdderComboBox.getSelectedIndex();
        if (i == 1) {
            addEmitter(new ImageEmitterPanel());
        } else if (i == 2) {
            addEmitter(new DynamicImageEmitterPanel());
        }
        emitterAdderComboBox.setSelectedIndex(0);
    }//GEN-LAST:event_emitterAdderComboBoxActionPerformed

    private void newStaticEmitterMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newStaticEmitterMenuItemActionPerformed
        addEmitter(new ImageEmitterPanel());
    }//GEN-LAST:event_newStaticEmitterMenuItemActionPerformed

    private void newDynamicEmitterMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newDynamicEmitterMenuItemActionPerformed
        addEmitter(new DynamicImageEmitterPanel());
    }//GEN-LAST:event_newDynamicEmitterMenuItemActionPerformed

    private void pauseEffectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseEffectMenuItemActionPerformed
        ParticleEffect effect = display.getEffect();
        if (pauseEffectMenuItem.isSelected()) {
            pauseButton.setText("Resume");
            effect.pause();
        } else {
            effect.resume();
            pauseButton.setText("Pause");
        }
        pauseButton.setSelected(pauseEffectMenuItem.isSelected());
    }//GEN-LAST:event_pauseEffectMenuItemActionPerformed

    private void resetEffectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetEffectMenuItemActionPerformed
        display.getEffect().start();
    }//GEN-LAST:event_resetEffectMenuItemActionPerformed

    private void newMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMenuItemActionPerformed
        int ret = JOptionPane.showConfirmDialog(this,
                "Would you like to save the current effect before creating a new one?",
                "The Bakery", JOptionPane.YES_NO_CANCEL_OPTION);
    }//GEN-LAST:event_newMenuItemActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void fixedCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fixedCheckBoxActionPerformed
        display.getEffect().setFixed(fixedCheckBox.isSelected());
    }//GEN-LAST:event_fixedCheckBoxActionPerformed

    private void bgColorMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bgColorMenuItemActionPerformed
        Color c = JColorChooser.showDialog(this, "Choose a new background color.", Color.black);
        if (c != null)
            display.setBackgroundColor(c);
    }//GEN-LAST:event_bgColorMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Bakery.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Bakery.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Bakery.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Bakery.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Bakery().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem bgColorMenuItem;
    private javax.swing.JMenuItem deleteEmitterMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JPanel effectControlPanel;
    private javax.swing.JLabel effectSettingsLabel;
    private javax.swing.JComboBox emitterAdderComboBox;
    private javax.swing.JButton emitterDeleterButton;
    private javax.swing.JTabbedPane emitterTabbedPane;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JCheckBox fixedCheckBox;
    private javax.swing.JPanel gameHosuingPanel;
    private javax.swing.JLabel gravityLabel;
    private javax.swing.JSlider gravitySlider;
    private javax.swing.JSpinner gravitySpinner;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JCheckBox loopCheckBox;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton moveTabLeftButton;
    private javax.swing.JButton moveTabRightButton;
    private javax.swing.JMenuItem newDynamicEmitterMenuItem;
    private javax.swing.JMenuItem newMenuItem;
    private javax.swing.JMenuItem newStaticEmitterMenuItem;
    private javax.swing.JToggleButton pauseButton;
    private javax.swing.JCheckBoxMenuItem pauseEffectMenuItem;
    private javax.swing.JButton playButton;
    private javax.swing.JMenuItem quitMenuItem;
    private javax.swing.JMenuItem resetEffectMenuItem;
    private javax.swing.JLabel windLabel;
    private javax.swing.JSlider windSlider;
    private javax.swing.JSpinner windSpinner;
    // End of variables declaration//GEN-END:variables


    private ParticleDisplay display;
    private int emitterCount = 0;

    private void quit() {
        int ret = JOptionPane.showConfirmDialog(this,
                "Would you like to save the current effect before exiting?",
                "The Bakery", JOptionPane.YES_NO_CANCEL_OPTION);
        this.setVisible(false);
        this.dispose();
        System.exit(0);
    }

    private void deleteEffect() {
        int index = emitterTabbedPane.getSelectedIndex();
        if (index == -1) return;
        int ret = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete " + (emitterTabbedPane.getTitleAt(index)) + "?",
                "The Bakery", JOptionPane.YES_NO_OPTION);
        if (ret != JOptionPane.YES_OPTION)
            return;
        display.getEffect().removeEmitter(display.getEffect().getEmitters().get(index));
        emitterTabbedPane.removeTabAt(index);
    }

    private void initEffect() {
        display.getEffect().setGravity(gravitySlider.getValue());
        display.getEffect().setWind(windSlider.getValue());
        display.getEffect().setLoop(loopCheckBox.isSelected());
        display.getEffect().setFixed(fixedCheckBox.isSelected());
    }

    public void addEmitter(JPanel panel) {
        iEmitterConfigurator conf = (iEmitterConfigurator)panel;
        JScrollPane scrollPane = new JScrollPane(panel);
        scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        emitterTabbedPane.add("Emitter " + (++emitterCount), scrollPane);
        conf.init(display);
    }

}
