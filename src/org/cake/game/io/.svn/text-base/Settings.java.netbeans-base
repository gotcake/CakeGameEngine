/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.cake.game.io;

import java.io.IOException;
import java.io.PrintStream;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Properties;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.cake.game.exception.GameException;
import org.cake.game.exception.ResourceException;

/**
 * A class containing a basic external data storage method useful for settings and properties.
 * Currently supports the ini and properties file types.
 * @author Aaron Cake
 */
public class Settings {
    
    private static Map<String, iDataProvider> dataProviders = null;
    
    public static iDataProvider getDataProvider(String ext) {
        if (dataProviders == null) {
            dataProviders = new HashMap<>();
            dataProviders.put("ini", new INIDataProvider());
            iDataProvider dp = new PropertiesDataProvider();
            dataProviders.put("properties", dp);
            dataProviders.put("props", dp);
        }
        iDataProvider dp = dataProviders.get(ext);
        if (dp == null)
            throw new GameException("iDataProvider not defined for extension: '" + ext + "'.");
        return dp;
    }
    
    private String home;
    private Map<String, String> values;
    private iResource resource;
    
    public Settings(String ref) {
        values = new HashMap<>();
        load(ref);
    }
    
    public Settings(iResource resource) {
        values = new HashMap<>();
        load(resource);
    }
    
    public Settings() {
        values = new HashMap<>();
    }
    
    public Settings(Map<String, String> data) {
        values = data;
    }
    
    public void load(String ref) {
        this.home = "";
        resource = ResourceManager.getDefault().getResource(ref);
        if (values != null) {
            values.clear();
        }
        if (resource.exists()) {
            values = getDataProvider(resource.getExtension()).read(resource, values);
        }
    }
    
    public void load(iResource resource) {
        this.home = "";
        this.resource = resource;
        if (values != null) {
            values.clear();
        }
        if (resource.exists()) {
            values = getDataProvider(resource.getExtension()).read(resource, values);
        }
    }
    
    public void setMap(Map<String, String> data) {
        this.values = data;
    }
    
    public boolean isEmpty() {
        return values.isEmpty();
    }
    
    public Map<String, String> getMap() {
        return values;
    }
    
    private Settings(String home, Map<String, String> values, iResource resource) {
        this.home = home;
        this.values = values;
    }
    
    public String get(String name) {
        return values.get(home + name);
    }
    
    public String get(String name, int index) {
        return values.get(home + name + "[" + index + "]");
    }
    
    public double getNumber(String name, int index) {
        return Double.parseDouble(values.get(home + name + "[" + index + "]"));
    }
    
    public double getNumber(String name) {
        return Double.parseDouble(values.get(home + name));
    }
    
    public String get(String name, String def) {
        String s = values.get(home + name);
        if (s == null)
            return def;
        return s;
    }
    
    public double getNumber(String name, double def) {
        String s = values.get(home + name);
        if (s == null)
            return def;
        return Double.parseDouble(s);
    }
    
    public String get(String name, int index, String def) {
        String s = values.get(home + name + "[" + index + "]");
        if (s == null)
            return def;
        return s;
    }
    
    public double getNumber(String name, int index, double def) {
        String s = values.get(home + name + "[" + index + "]");
        if (s == null)
            return def;
        return Double.parseDouble(s);
    }
    
    public Settings go(String name) {
        return new Settings(home + name + ".", values, resource);
    }
    
    public void set(String name, String value) {
        values.put(home + name, value);
    }
    
    public void set(String name, long value) {
        values.put(home + name, String.valueOf(value));
    }
    
    public void set(String name, double value) {
        values.put(home + name, String.valueOf(value));
    }
    
    public void set(String name, int index, String value) {
        values.put(home + name + "[" + index + "]", value);
    }
    
    public void set(String name, int index, long value) {
        values.put(home + name + "[" + index + "]", String.valueOf(value));
    }
    
    public void set(String name, int index, double value) {
        values.put(home + name + "[" + index + "]", String.valueOf(value));
    }
    
    public void merge(Settings other, String node) {
        for (Entry<String, String> s: other.getMap().entrySet()) {
            values.put(node + "." + s.getKey(), s.getValue());
        }
    }
    
    public Settings copy() {
        Map<String, String> map = new HashMap<>();
        map.putAll(values);
        return new Settings(home, map, resource);
    }
    
    public void merge(Settings other, boolean override) {
        for (Entry<String, String> s: other.getMap().entrySet()) {
            if (override || !values.containsKey(s.getKey()))
                values.put(s.getKey(), s.getValue());
        }
    }
    
    public boolean has(String name) {
        return values.containsKey(name);
    }
    
    public boolean has(String name, int index) {
        return values.containsKey(name + "[" + index + "]");
    }
    
    public void save() {
        getDataProvider(resource.getExtension()).write(resource, values);
    }
    
    public void save(String ref) {
        iResource r = ResourceManager.getDefault().getResource(ref);
        getDataProvider(r.getExtension()).write(r, values);
    }
    
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("Settings[ home=\"").append(home).append("\"\n");
        for (Entry<String, String> entry: values.entrySet()) {
            sb.append(entry.getKey()).append("=\"").append(entry.getValue()).append("\"\n");
        }
        sb.append(']');
        return sb.toString();
    }
    
    public static interface iDataProvider {
        
        public Map<String, String> read(iResource res, Map<String, String> data);
        
        public void write(iResource res, Map<String, String> data);
        
    }
    
    public static class INIDataProvider implements iDataProvider {

        @Override
        public Map<String, String> read(iResource res, Map<String, String> data) {
            Pattern sectionPattern = Pattern.compile("\\s*\\[([\\w\\d_\\.#%]+)\\]\\s*?(;.*)?");
            Pattern iniPattern = Pattern.compile("\\s*([\\w\\d_\\.]+?[\\w\\d_\\.\\[\\]]*)\\s*=\\s*(.*?)\\s*?(;.*)?");
            if (data == null)
                data = new HashMap<>();
            Scanner in = new Scanner(res.openRead());
            String section = "";
            while (in.hasNextLine()) {
                String line = in.nextLine();
                if (line.isEmpty() || line.matches("\\s*;.*")) {
                    // ignore
                } else {
                    Matcher m = sectionPattern.matcher(line);
                    if (m.matches()) {
                        if (m.group(1).equals("__default__")) {
                            section = "";
                        } else {
                            section = m.group(1) + ".";
                        }
                        
                    } else {
                        m = iniPattern.matcher(line);
                        if (m.matches()) {
                            data.put(section + m.group(1), m.group(2));
                        }
                    }
                }
            }
            return data;
        }
        

        @Override
        public void write(iResource res, Map<String, String> data) {
            PrintStream out = new PrintStream(res.openWrite());
            out.println("; " + DateFormat.getDateTimeInstance().format(new Date()));
            List<Entry<String, String>> entries = new ArrayList<>();
            entries.addAll(data.entrySet());
            List<String> prefixes = new ArrayList<>();
            for (Entry<String, String> e: entries) {
                int i = e.getKey().indexOf(".");
                if (i == -1) continue;
                String prefix = e.getKey().substring(0, i);
                if (!prefixes.contains(prefix) && !prefix.contains("[") && !prefix.contains("]"))
                    prefixes.add(prefix);
            }
            List<Entry<String, String>> toRemove;
            while (!prefixes.isEmpty() && !entries.isEmpty()) {
                String prefix = prefixes.remove(0);
                out.println("[" + prefix + "]");
                toRemove = new ArrayList<>();
                for (Entry<String, String> e: entries) {
                    if (e.getKey().startsWith(prefix + ".")) {
                        toRemove.add(e);
                        String name = e.getKey().substring(prefix.length() + 1);
                        out.println(name + "=" + e.getValue());
                    }
                }
                entries.removeAll(toRemove);
            }
            if (!entries.isEmpty()) {
                out.println("[__default__]");
            }
            for (Entry<String, String> e: entries) {
                out.println(e.getKey() + "=" + e.getValue());
            }
        }
        
    }
    
    public static class PropertiesDataProvider implements iDataProvider {

        @Override
        public Map<String, String> read(iResource res, Map<String, String> data) {
            try {
                if (data == null)
                    data = new HashMap<>();
                Properties p = new Properties();
                p.load(res.openRead());
                for (String s: p.stringPropertyNames()) {
                    data.put(s, p.getProperty(s));
                }
                return data;
            } catch (IOException ex) {
                throw new ResourceException(ex);
            }
        }

        @Override
        public void write(iResource res, Map<String, String> data) {
            Properties p = new Properties();
            for (Entry<String, String> e: data.entrySet()) {
                p.put(e.getKey(), e.getValue());
            }
            try {
                p.store(res.openWrite(), "Generated Property List");
            } catch (IOException ex) {
                throw new ResourceException(ex);
            }
        }
    }
}
