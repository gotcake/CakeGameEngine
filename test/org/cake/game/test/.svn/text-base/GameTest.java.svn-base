/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.cake.game.test;

import javax.media.opengl.GL2;
import org.cake.game.*;
import org.cake.game.Graphics.BlendingMode;
import org.cake.game.input.*;
import org.cake.game.io.ResourceManager;
import org.cake.game.io.objectxml.ObjectXML;
import org.cake.game.particle.ImageParticleEmitter;
import org.cake.game.particle.ParticleEffect;

/**
 * A basic test yeah.
 * @author Aaron Cake
 */
public class GameTest implements iGameAdapter, iGameKeyListener, iGameMouseListener {

    public static void main(String[] args) {

        AWTGameWindow window = new AWTGameWindow(800, 600, true, false);
        GameTest callback = new GameTest();

        window.setGameAdapter(callback);
        window.addListener(callback);

        window.start();

    }
    ImageParticleEmitter emitter;
    ParticleEffect effect;
    MultiColorGradient grad;
    int i=0;

    @Override
    public void init(Game game) {
        ResourceManager.getDefault().loadResourceMap("resources/resources.ini");
        grad = new MultiColorGradient();
        grad.setColor(Color.blue, 0);
        grad.setColor(Color.cyan, 0.2f);
        grad.setColor(Color.green, 0.3f);
        grad.setColor(Color.yellow, 0.5f);
        grad.setColor(Color.orange, 0.6f);
        grad.setColor(Color.red, 0.7f);
        grad.setColor(Color.magenta, 0.8f);
        grad.setColor(Color.transparentBlack, 1);
        grad.setRepeats(true);
        //System.out.println(grad);
        emitter = new ImageParticleEmitter();
        emitter.setImage("resources/images/particle1.png");
        emitter.setGradient(grad);
        //System.out.println(ObjectXML.serialize(emitter));
        effect = new ParticleEffect();
        effect.addEmitter(emitter);
        effect.start();
        emitter.setActive(false);
    }

    @Override
    public void update(Game game, float delta) {
        Keyboard k = game.getKeyboard();
        Mouse m = game.getMouse();

        emitter.setPosition(m.getX(), m.getY());

        effect.update(game, delta);


        //emitter.update(delta);
    }

    @Override
    public void render(Game game, Graphics graphics) {
        graphics.drawString("Fps: " + (int)game.getFPS(), 5, 25);
        graphics.drawString("Particles: " + emitter.currentParticles(), 5, 50);
        GL2 gl = graphics.getGL();

        effect.render(game, graphics);
    }

    @Override
    public boolean exitRequested(Game game) {
        return true;
    }

    @Override
    public void exit(Game game) {

    }

    @Override
    public void finished() {

    }

    @Override
    public void keyTyped(Game g, GameKeyEvent e) {

    }

    @Override
    public void keyPressed(Game g, GameKeyEvent e) {
        if (e.key == Key.F1) {
            g.setFullscreen(!g.isFullscreen());
        } else if (e.key == Key.Escape) {
            g.exit();
        } else if (e.key == Key.Num1) {
            effect.stop();
            effect.start();
        } else if (e.key == Key.Num2) {
            Graphics gr = g.getGraphics();
            BlendingMode[] modes = BlendingMode.values();
            i = (i + 1) % modes.length;
            gr.setBlendingMode(modes[i]);
            System.out.println("Blending Mode: " + modes[i].name());
        }
    }

    @Override
    public void keyReleased(Game g, GameKeyEvent e) {

    }

    @Override
    public void buttonPressed(Game g, GameMouseEvent e) {
        if (e.button == 1) {
            emitter.setActive(true);
        }
    }

    @Override
    public void buttonReleased(Game g, GameMouseEvent e) {
        if (e.button == 1) {
            emitter.setActive(false);
        }
    }

    @Override
    public void buttonClicked(Game g, GameMouseEvent e) {

    }

    @Override
    public void mouseMoved(Game g, GameMouseEvent e) {
    }

    @Override
    public void mouseDragged(Game g, GameMouseEvent e) {
        if (e.button == 3) {
            float scale = 1.0f;
            effect.setGravity(effect.getGravity() + e.dpos.y * scale);
            effect.setWind(effect.getWind() + e.dpos.x * scale);
        }
    }

    @Override
    public void wheelScrolled(Game g, GameMouseEvent e) {
    }

}
